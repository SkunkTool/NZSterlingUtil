//package com.nedzhang.util;
//
//import java.beans.XMLDecoder;
//import java.beans.XMLEncoder;
//import java.io.ByteArrayInputStream;
//import java.io.ByteArrayOutputStream;
//import java.io.InputStream;
//import java.io.ObjectOutputStream;
//import java.io.OutputStream;
//
//import org.xml.sax.SAXParseException;
//
//public final class StringSerializeUtil {
//
//	private StringSerializeUtil() {
//
//	}
//
//	/***
//	 * Serialize an object into xml string.
//	 * 
//	 * @param obj
//	 *            object to serialize
//	 * @return Xml string represents the object
//	 */
//	public static String serializeObject(final Object obj) {
//		
//		ByteArrayOutputStream baos = new ByteArrayOutputStream();
//        ObjectOutputStream oos = new ObjectOutputStream( baos );
//        oos.writeObject( obj );
//        oos.close();
//        return new String( Base64EncoderUtil.encode(baos.toByteArray())); 
//        
//		final OutputStream bufferStream = new ByteArrayOutputStream();
//
//		// Create XML encoder.
//		final XMLEncoder xenc = new XMLEncoder(bufferStream);
//
//		xenc.writeObject(obj);
//		// Need to close the XMLEncoder to flush.
//		xenc.close();
//
//		final String serializedString = bufferStream.toString();
//
//		// JavaDoc indicates that we will not need to close
//		// a ByteArrayOutputStream. From JavaDoc:
//		// Closing a ByteArrayOutputStream has no effect. The methods
//		// in this class can be called after the stream has been closed
//		// without generating an IOException.
//		//
//		// bufferStream.close();
//
//		return serializedString;
//	}
//
//	/***
//	 * Deserialize a xml string into an object
//	 * 
//	 * @param <T>
//	 *            type of the object to deserialize to
//	 * @param xmlString
//	 *            xml string represents an object
//	 * @param classToCastTo
//	 *            class to deserialize to
//	 * @return object deserialized from the xml
//	 * @throws SAXParseException
//	 *             if xmlString is not well formatted
//	 * @throws ClassCastException
//	 *             if the object is not the an instance of classToCastTo
//	 */
//	public static <T> T deserializeObject(final String xmlString,
//			final Class<T> classToCastTo) throws SAXParseException,
//			ClassCastException {
//
//		final InputStream fis = new ByteArrayInputStream(xmlString.getBytes());
//
//		return deserializeObject(fis, classToCastTo);
//
//	}
//
//	/***
//	 * Deserialize a xml string into an object
//	 * 
//	 * @param <T>
//	 *            type of the object to deserialize to
//	 * @param xmlStream
//	 *            xml stream represents an object
//	 * @param classToCastTo
//	 *            class to deserialize to
//	 * @return object deserialized from the xml
//	 * @throws SAXParseException
//	 *             if xmlString is not well formatted
//	 * @throws ClassCastException
//	 *             if the object is not the an instance of classToCastTo
//	 */
//	@SuppressWarnings("unchecked")
//	public static <T> T deserializeObject(final InputStream xmlStream,
//			final Class<T> classToCastTo) throws SAXParseException,
//			ClassCastException {
//
//		// Create XML decoder.
//		final XMLDecoder xmlDecoder = new XMLDecoder(xmlStream);
//
//		final Object deserializedObj = xmlDecoder.readObject();
//
//		// Will not perform cast check,
//		// Let the casting throw ClassCastException if needed.
//		return (T) deserializedObj;
//
//	}
// }
